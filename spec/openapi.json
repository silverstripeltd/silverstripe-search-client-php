{
    "openapi": "3.1.0",
    "info": {
        "title": "BifrÃ¶st",
        "description": "\nBifrÃ¶st API ðŸŒˆ\n\nManaged search for Silverstripe Cloud\n",
        "termsOfService": "http://https://silverstripe.com/search#terms",
        "contact": {
            "name": "Silverstripe Ltd",
            "url": "https://silverstripe.com/search",
            "email": "search@silverstripe.com"
        },
        "version": "0.1.3"
    },
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
        "/{engine_name}/documents": {
            "post": {
                "tags": [
                    "documents"
                ],
                "summary": "Post Documents",
                "description": "Create or update documents.\n\nDocuments are indexed asynchronously. There will be a processing delay before they are available to your Engine.\n\n**Key points to remember when creating documents:**\n\n* It is recommended that you provide your own `id` field, but If no `id` is provided, a unique `id` will be\n  generated.\n* A new document is created each time content is received without an `id` - beware duplicates!\n* A document will be updated - not created - if its `id` already exists within a document.\n\n**Processing file contents**\n\n* An `_attachment` field can be used to attach PDF and Docx files to your document.\n* The _attachment` field should contain a base 64 encoded string of binary.",
                "operationId": "documents_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "number"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "anyOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "number"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "examples": [
                                        {
                                            "id": "silverstripe_cms_model_sitetree_1",
                                            "title": "Auckland Zoo",
                                            "term_ids": [
                                                1,
                                                2,
                                                5
                                            ],
                                            "location": "-36.8639680119916, 174.7199894180399",
                                            "last_edited": "2024-06-14T13:53:44+12:00"
                                        }
                                    ]
                                },
                                "title": "Documents"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentPostPatchResponse"
                                    },
                                    "title": "Response Documents Post"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "documents"
                ],
                "summary": "Patch Documents",
                "description": "Update specific document fields by `id` and `field`.\n\nThere are a couple of limitations of the PATCH action:\n- The `id` is required and new fields cannot be created using `PATCH`!\n- processing file content is **not supported** via PATCH",
                "operationId": "documents_patch",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "number"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "anyOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "number"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "examples": [
                                        {
                                            "id": "silverstripe_cms_model_sitetree_1",
                                            "title": "Auckland Zoo",
                                            "term_ids": [
                                                1,
                                                2,
                                                5
                                            ],
                                            "location": "-36.8639680119916, 174.7199894180399",
                                            "last_edited": "2024-06-14T13:53:44+12:00"
                                        }
                                    ]
                                },
                                "title": "Documents"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentPostPatchResponse"
                                    },
                                    "title": "Response Documents Patch"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "documents"
                ],
                "summary": "Delete Documents",
                "description": "Delete documents by `id`.",
                "operationId": "documents_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "examples": [
                                    [
                                        "does_not_exist",
                                        "park_yosemite",
                                        "park_zion"
                                    ]
                                ],
                                "title": "Document Ids"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentsDeleteResponse"
                                    },
                                    "title": "Response Documents Delete"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "documents"
                ],
                "summary": "Get Documents",
                "description": "A paginated array of JSON objects representing documents.\n\n**Query parameters:**\n\n`ids` **(required)**\n* A parameterized query of document `id`. EG: ids=zion_park&ids=does_not_exist",
                "operationId": "documents_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "examples": [
                                    [
                                        "does_not_exist",
                                        "park_yosemite",
                                        "park_zion"
                                    ]
                                ],
                                "title": "Document Ids"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Document"
                                    },
                                    "title": "Response Documents Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{engine_name}/documents/list": {
            "post": {
                "tags": [
                    "documents"
                ],
                "summary": "Post Documents List",
                "description": "**Body:**\n\n`page` (optional)\n* Object to delimit the pagination parameters.\n\n`page.size` (optional)\n* Number of results per page.\n* Must be greater than or equal to 1 and less than or equal to 100.\n* Defaults to 10.\n\n`page.current` (optional)\n* Page number of results to return.\n* Must be greater than or equal to 1 and less than or equal to 100.\n* Defaults to 1.",
                "operationId": "documents_list_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentListRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentListResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/engines": {
            "post": {
                "tags": [
                    "engines"
                ],
                "summary": "Post Engines",
                "operationId": "engines_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnginesResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/{engine_name}/query_suggestion": {
            "post": {
                "tags": [
                    "search"
                ],
                "summary": "Post Query Suggestion",
                "description": "Provide relevant query suggestions for incomplete queries. Also known as Autocomplete.\n\nOnly available on text fields.\n\n**Body:**\n\n`query` **(required)**\n* A partial query for which to receive suggestions.\n\n`types` (optional)\n* Specify the documents key within the types parameter to look for suggestions within certain text fields. Defaults to all text fields.\n\n`size` (optional)\n* Number of query suggestions to return. Must be between 1 and 20. Defaults to 10.",
                "operationId": "query_suggestion_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuerySuggestionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuerySuggestionResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{engine_name}/schema": {
            "get": {
                "tags": [
                    "configuration"
                ],
                "summary": "Get Schema",
                "operationId": "schema_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schema"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "configuration"
                ],
                "summary": "Post Schema",
                "description": "**Field types:**\n\n* `text`\n* `number`\n* `date`\n    * Strings containing formatted dates, e.g. \"2015-01-01\" or \"2015/01/01 12:10:30\".\n    * A number representing seconds-since-the-epoch.\n* `geolocation`\n\n**Field names:**\n\n* Must contain a lowercase letter and may only contain lowercase letters, numbers, and underscores.\n* Must not contain whitespace or have a leading underscore.\n* Must not contain more than 64 characters.\n* Must not be any of the following reserved words:\n    * `id`\n    * `engine_id`\n    * `search_index_id`\n    * `highlight`\n    * `any`\n    * `all`\n    * `none`\n    * `or`\n    * `and`\n    * `not`\n* The following fields can be used, but must be of type `text`\n    * `body`\n* The following fields can be used, but must be of type `binary`\n    * `_attachment`",
                "operationId": "schema_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Schema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchemaPostResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{engine_name}/search": {
            "post": {
                "tags": [
                    "search"
                ],
                "summary": "Post Search",
                "description": "Submit a search and receive a set of results with metadata.\n\n**Body:**\n\n`query` **(required)**\n* String or number to match\n* The value '' (empty string) matches all documents\n* The following Lucene query syntax is supported:\n    * double-quoted strings\n    * `+` and `-`\n    * `AND` and `NOT`\n\n`page` (optional)\n* Object to delimit the pagination parameters.\n\n`page.size` (optional)\n* Number of results per page\n* Must be greater than or equal to 1 and less than or equal to 100\n* Defaults to 10.\n\n`page.current` (optional)\n* Page number of results to return\n* Must be greater than or equal to 1 and less than or equal to 100\n* Defaults to 1.\n\n`sort` (optional)\n* Sort your results in an order other than document score\n* JSON object where the key is the field you wish to sort on, and the value is `asc` or `desc`\n* Multiple keys/value pairs can be provided if you wish to sort against multiple fields\n* The following sorting options are available based on field type:\n    * `text`: Alphanumerically, case-sensitive\n    * `number`: Numerically\n    * `date`: Historically\n    * `geolocation`: By distance to a provided geographical point.\n\n`facets` (optional)\n* Create value and range facets\n* The facets key opens up the object where you define your facet field\n* The following facet types are available based on field type:\n    * `text`: Value facet\n    * `number`: Value facet, Range facet\n    * `date`: Value facet, Range facet\n    * `geolocation`: Currently unsupported\n\n`facets.{field_key}` **(required)**\n* The field from your schema that you which to apply your facet to.\n\n`facets.{field_key}.type` **(required)**\n* The type of facet to use. Must be one of \"value\" or \"range\".\n\n`facets.{field_key}.name` (optional)\n* Custom name given to the facet that is used for your results.\n\n`facets.{field_key}.size` (optional)\n* Only valid for \"value\" type facets\n* How many facets would you like to return?\n* Can be between 1 and 100\n* Defaults to 10.\n\n`facets.{field_key}.sort` (optional)\n* Only valid for \"value\" type facets\n* JSON object where the key is either `count` or `value` and the value is `asc` or `desc`\n* Defaults to descending `count`.\n\n`facets.{field_key}.ranges` (required for \"range\" type facets)\n* Only valid for \"range\" type facets\n* An array of range objects (JSON objects). Each range object can include:\n    * `from`: A value to select from (inclusive of the value defined). Required if no \"to\" value is provided\n    * `to`: A value to select to (exclusive of the value defined). Required if no \"from\" value is provided\n    * `name`: A name given to the range (optional)\n\n`filters` (optional)\n* Apply conditions to field values to filter results\n* The following filters are available based on field type:\n    * `text`: Value filter\n    * `number`: Value filter, Range filter\n    * `date`: Value filter, Range filter\n    * `geolocation`: Geo filter\n\n`search_fields` (optional)\n* The search_fields parameter restricts a query to search only specific fields\n* Restricting fields will result in faster queries, especially for schemas with many text fields\n* Only available within text fields.\n\n`search_field.{field_key}` **(required)**\n* {field_key} must be a valid field in your documents, the value should be a json object with an (optional) `weight`\n  key/value (see below)\n\n`search_field.{field_key}.weight` (optional)\n* Weight is given between 10 (most relevant) to 1 (least relevant). You can also set weight to 0 to make the field\n  unsearchable at query time.\n\n`result_fields` (optional)\n* Change the fields which appear in search results and how their values are rendered\n* **Note:** `id` is a special case. It will always return within the `raw` object, and it ignores any requests for\n  `size` or `snippet`\n\n`result_fields.{field_key}` (optional)\n* {field_key} must be a valid field in your documents, the value should be a json object with an (optional) `raw`\n  and/or `snippet` keys (see below)\n\n`result_fields.{field_key}.raw` (optional)\n* An exact representation of the value within a field. And it is exact! It is not HTML escaped\n* A json object with an optional `size` key (see below).\n\n`result_fields.{field_key}.raw.size` (optional)\n* Length of the return value. Only can be used on text fields\n* Must be at least 20\n* Defaults to the entire text field\n* If given for a different field type other than text, it will be silently ignored.\n\n`result_fields.{field_key}.snippet` (optional)\n* The query match will be wrapped in `<em></em>` tags, for highlighting, if a match exists\n* A json object with optional `size` and `fallback` keys (see below)\n\n`result_fields.{field_key}.snippet.size` (optional)\n* Character length of the snippet returned\n* Must be at least 20\n* Defaults to 100.\n\n`result_fields.{field_key}.snippet.fallback` (optional)\n* If true, return the raw text field if no snippet is found. If false, only use snippets.\n\n`analytics` (optional)\n* Object to delimit the analytics parameters.\n\n`analytics.tags` **(required)**\n* Array of strings representing the tags youâ€™d like to apply to the query\n* You may submit up to 16 tags, and each may be up to 64 characters in length.\n\n`record_analytics` (optional)\n* If `true`, generates an analytics query event for the search request\n* Defaults to `true`.",
                "operationId": "search_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/SearchResponse"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "title": "Response Search Post"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{engine_name}/spelling_suggestion": {
            "post": {
                "tags": [
                    "search"
                ],
                "summary": "Post Spelling Suggestion",
                "description": "Provide relevant spelling suggestions for queries. Not to be confused with autocomplete.\n\nOnly available on text fields.\n\n**Body:**\n\n`query` **(required)**\n* A query for which to receive spelling suggestions.\n\n`fields` **(required)**\n* Specify the fields within your documents that you would like spelling suggestions from. At least one field is\n  required.\n\n`size` (optional)\n* Number of spelling suggestions to return. Must be between 1 and 10. Defaults to 1.",
                "operationId": "spelling_suggestion_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpellingSuggestionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpellingSuggestionResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{engine_name}/synonyms": {
            "get": {
                "tags": [
                    "synonyms"
                ],
                "summary": "Get Rules",
                "description": "Retrieve all synonyms for a particular engine.",
                "operationId": "synonym_rules_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SynonymRule"
                                    },
                                    "title": "Response Synonym Rules Get"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "synonyms"
                ],
                "summary": "Post Rule",
                "description": "The POST method will automatically generate an ID for your synonym.\n\nOur synonym format supports two styles of definition:\n\n* Equivalent synonyms: Groups of words, where any word in the group is a valid replacement. Example:\n    * \"ipod, i-pod, i pod\"\n    * \"computer, pc, laptop\"\n* Explicit synonyms: Groups of words that are replaced by a second group of words. IE words on the left are replaced\n  (and expanded) into the words on the right. Example:\n    * \"pc => personal computer\"\n    * \"js => javascript, es6\"\n    * \"sea biscuit, sea biscit => seabiscuit\"\n* A maximum of 32 words can be added to a synonym",
                "operationId": "synonym_rule_post",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SynonymRuleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SynonymRule"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/{engine_name}/synonyms/{rule_id}": {
            "put": {
                "tags": [
                    "synonyms"
                ],
                "summary": "Put Rule",
                "description": "Create or update an existing synonym.\n\nOur synonym value format supports two styles of definition:\n\n* Equivalent synonyms: Groups of words, where any word in the group is a valid replacement. Example:\n    * \"ipod, i-pod, i pod\"\n    * \"computer, pc, laptop\"\n* Explicit synonyms: Groups of words that are replaced by a second group of words. IE words on the left are replaced\n  (and expanded) into the words on the right. Example:\n    * \"pc => personal computer\"\n    * \"js => javascript, es6\"\n    * \"sea biscuit, sea biscit => seabiscuit\"\n* A maximum of 32 words can be added to a synonym",
                "operationId": "synonym_rule_put",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "rule_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Rule Id"
                        }
                    },
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SynonymRuleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SynonymRule"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "synonyms"
                ],
                "summary": "Get Rule",
                "description": "Retrieve a specific synonym by its ID.",
                "operationId": "synonym_rule_get",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "rule_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Rule Id"
                        }
                    },
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SynonymRule"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "synonyms"
                ],
                "summary": "Delete Rule",
                "description": "Delete an existing synonym value by its ID.",
                "operationId": "synonym_rule_delete",
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "rule_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Rule Id"
                        }
                    },
                    {
                        "name": "engine_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Your engine name (as provided by Silverstripe)"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseSuccess"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Coordinate": {
                "properties": {
                    "latitude": {
                        "type": "number",
                        "maximum": 90.0,
                        "minimum": -90.0,
                        "title": "Latitude"
                    },
                    "longitude": {
                        "type": "number",
                        "maximum": 180.0,
                        "minimum": -180.0,
                        "title": "Longitude"
                    }
                },
                "type": "object",
                "required": [
                    "latitude",
                    "longitude"
                ],
                "title": "Coordinate"
            },
            "Document": {
                "additionalProperties": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "type": "array"
                        }
                    ]
                },
                "type": "object",
                "title": "Document",
                "examples": [
                    {
                        "acres": "147237.02",
                        "date_established": "1919-11-19T06:00:00Z",
                        "description": "Lorem ipsum.",
                        "id": "park_zion",
                        "location": "37.3,-113.05",
                        "nps_link": "https://www.nps.gov/zion/index.htm",
                        "square_km": "595.8",
                        "states": [
                            "Utah"
                        ],
                        "title": "Zion",
                        "visitors": "4295127",
                        "world_heritage_site": "false"
                    }
                ]
            },
            "DocumentField": {
                "properties": {
                    "raw": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Raw"
                    },
                    "snippet": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Snippet"
                    }
                },
                "type": "object",
                "title": "DocumentField"
            },
            "DocumentListRequest": {
                "properties": {
                    "page": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PaginationNoTotals"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "default": {
                            "current": 1,
                            "size": 10
                        }
                    }
                },
                "type": "object",
                "title": "DocumentListRequest"
            },
            "DocumentListResponse": {
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/DocumentListResponseMeta"
                    },
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/Document"
                        },
                        "type": "array",
                        "title": "Results"
                    }
                },
                "type": "object",
                "required": [
                    "meta",
                    "results"
                ],
                "title": "DocumentListResponse"
            },
            "DocumentListResponseMeta": {
                "properties": {
                    "alerts": {
                        "anyOf": [
                            {
                                "items": {},
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Alerts"
                    },
                    "page": {
                        "$ref": "#/components/schemas/PaginationWithTotals"
                    },
                    "request_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Request Id"
                    },
                    "warnings": {
                        "anyOf": [
                            {
                                "items": {},
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Warnings"
                    }
                },
                "type": "object",
                "required": [
                    "page"
                ],
                "title": "DocumentListResponseMeta"
            },
            "DocumentPostPatchResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "errors": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errors"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "DocumentPostPatchResponse",
                "examples": [
                    {
                        "errors": [],
                        "id": "park_zion"
                    }
                ]
            },
            "DocumentResponse": {
                "additionalProperties": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/DocumentResponseMeta"
                        },
                        {
                            "$ref": "#/components/schemas/DocumentField"
                        }
                    ]
                },
                "type": "object",
                "title": "DocumentResponse",
                "examples": [
                    {
                        "_meta": {
                            "engine": "search-parks-main",
                            "id": "park_everglades",
                            "score": 1396363.1
                        },
                        "acres": {
                            "raw": 1508968.1
                        },
                        "date_established": {
                            "raw": "1934-05-30T05:00:00+00:00"
                        },
                        "description": {
                            "raw": "The Everglades are the largest tropical wilderness in the United States."
                        },
                        "id": {
                            "raw": "park_everglades"
                        },
                        "location": {
                            "raw": "25.32,-80.93"
                        },
                        "nps_link": {
                            "raw": "https://www.nps.gov/ever/index.htm"
                        },
                        "square_km": {
                            "raw": 6106.6
                        },
                        "states": {
                            "raw": [
                                "Florida"
                            ]
                        },
                        "title": {
                            "raw": "Everglades"
                        },
                        "visitors": {
                            "raw": 930907
                        },
                        "world_heritage_site": {
                            "raw": "true"
                        }
                    }
                ]
            },
            "DocumentResponseMeta": {
                "properties": {
                    "score": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Score"
                    },
                    "engine": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Engine"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Id"
                    }
                },
                "type": "object",
                "title": "DocumentResponseMeta"
            },
            "DocumentsDeleteResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "examples": [
                            "park_zion"
                        ]
                    },
                    "deleted": {
                        "type": "boolean",
                        "title": "Deleted",
                        "examples": [
                            true
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "deleted"
                ],
                "title": "DocumentsDeleteResponse"
            },
            "Engine": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "examples": [
                            "search-national-parks-demo"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "Engine"
            },
            "EnginesResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/Engine"
                        },
                        "type": "array",
                        "title": "Results"
                    }
                },
                "type": "object",
                "required": [
                    "results"
                ],
                "title": "EnginesResponse"
            },
            "FacetResponse": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "value",
                            "range"
                        ],
                        "title": "Type"
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "data": {
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ResponseFacetValue"
                                },
                                {
                                    "$ref": "#/components/schemas/ResponseFacetRange"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Data"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "data"
                ],
                "title": "FacetResponse"
            },
            "FacetsRequest": {
                "additionalProperties": {
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RequestFacetValue"
                            },
                            {
                                "$ref": "#/components/schemas/RequestFacetRange"
                            }
                        ]
                    },
                    "type": "array"
                },
                "type": "object",
                "title": "FacetsRequest"
            },
            "FilterObjectLevel1": {
                "properties": {
                    "all": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel2"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "All"
                    },
                    "any": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel2"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Any"
                    },
                    "none": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel2"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "None"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FilterObjectLevel1"
            },
            "FilterObjectLevel2": {
                "properties": {
                    "all": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel3"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "All"
                    },
                    "any": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel3"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Any"
                    },
                    "none": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel3"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "None"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FilterObjectLevel2"
            },
            "FilterObjectLevel3": {
                "properties": {
                    "all": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel4"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "All"
                    },
                    "any": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel4"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Any"
                    },
                    "none": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel4"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "None"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FilterObjectLevel3"
            },
            "FilterObjectLevel4": {
                "properties": {
                    "all": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ValueFilter"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "All"
                    },
                    "any": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ValueFilter"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Any"
                    },
                    "none": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/ValueFilter"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "None"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FilterObjectLevel4"
            },
            "Filters": {
                "properties": {
                    "all": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel1"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "All"
                    },
                    "any": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel1"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Any"
                    },
                    "none": {
                        "anyOf": [
                            {
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValueFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FilterObjectLevel1"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "None"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Filters",
                "examples": [
                    {
                        "all": [
                            {
                                "date": {
                                    "from": "2018-07-02",
                                    "to": "2018-07-02"
                                }
                            },
                            {
                                "states": "Washington"
                            },
                            {
                                "states": [
                                    "Washington",
                                    "Idaho"
                                ]
                            },
                            {
                                "location": {
                                    "center": {
                                        "latitude": -77.08,
                                        "longitude": 38.89
                                    },
                                    "distance": 2,
                                    "unit": "km"
                                }
                            }
                        ],
                        "any": [
                            {
                                "date": {
                                    "from": "2018-07-02",
                                    "to": "2018-07-02"
                                }
                            },
                            {
                                "states": "Washington"
                            },
                            {
                                "states": [
                                    "Washington",
                                    "Idaho"
                                ]
                            },
                            {
                                "location": {
                                    "center": {
                                        "latitude": -77.08,
                                        "longitude": 38.89
                                    },
                                    "from": 0,
                                    "to": 1000,
                                    "unit": "km"
                                }
                            }
                        ],
                        "none": [
                            {
                                "date": {
                                    "from": "2018-07-02",
                                    "to": "2018-07-02"
                                }
                            },
                            {
                                "states": "Washington"
                            },
                            {
                                "states": [
                                    "Washington",
                                    "Idaho"
                                ]
                            }
                        ]
                    }
                ]
            },
            "Geo": {
                "properties": {
                    "from": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From"
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To"
                    },
                    "center": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Coordinate"
                            },
                            {
                                "prefixItems": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "type": "array",
                                "maxItems": 2,
                                "minItems": 2
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "title": "Center"
                    },
                    "unit": {
                        "$ref": "#/components/schemas/Unit"
                    },
                    "distance": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Distance"
                    }
                },
                "type": "object",
                "required": [
                    "center",
                    "unit"
                ],
                "title": "Geo"
            },
            "Geolocation": {
                "properties": {
                    "center": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Coordinate"
                            },
                            {
                                "prefixItems": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "type": "array",
                                "maxItems": 2,
                                "minItems": 2
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "title": "Center"
                    },
                    "order": {
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "title": "Order"
                    }
                },
                "type": "object",
                "required": [
                    "center",
                    "order"
                ],
                "title": "Geolocation"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "PaginationNoTotals": {
                "properties": {
                    "current": {
                        "type": "integer",
                        "title": "",
                        "description": "Page number of results to return. Must be greater than or equal to 1 and less than or equal to \n        100. Defaults to 1.",
                        "default": 1,
                        "examples": [
                            1
                        ]
                    },
                    "size": {
                        "type": "integer",
                        "title": "",
                        "description": "Number of results per page. Must be greater than or equal to 1 and less than or equal to 1000. \n        Defaults to 10.",
                        "default": 10,
                        "examples": [
                            5
                        ]
                    }
                },
                "type": "object",
                "title": "PaginationNoTotals"
            },
            "PaginationWithTotals": {
                "properties": {
                    "current": {
                        "type": "integer",
                        "title": "Current",
                        "description": "Number representing the current page of results.",
                        "examples": [
                            1
                        ]
                    },
                    "size": {
                        "type": "integer",
                        "title": "Size",
                        "description": "Number representing the results per page.",
                        "examples": [
                            5
                        ]
                    },
                    "total_pages": {
                        "type": "integer",
                        "title": "Total Pages",
                        "description": "Number representing the total pages of results.\n        Value is 0 when you paginate beyond 10,000 results.",
                        "examples": [
                            5
                        ]
                    },
                    "total_results": {
                        "type": "integer",
                        "title": "Total Results",
                        "description": "Number representing the total results across all pages.\n        The values 0 through 9999 are exact counts.\n        The value 10000 is a pseudo keyword representing greater than or equal to 10,000 results.",
                        "examples": [
                            22
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "current",
                    "size",
                    "total_pages",
                    "total_results"
                ],
                "title": "PaginationWithTotals"
            },
            "QuerySuggestionRequest": {
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "A partial query for which to receive suggestions.",
                        "examples": [
                            "car"
                        ]
                    },
                    "size": {
                        "type": "integer",
                        "maximum": 20.0,
                        "minimum": 1.0,
                        "title": "Size",
                        "description": "Maximum number of query suggestions to return. Must be between 1 and 20. Defaults to 10.",
                        "default": 10,
                        "examples": [
                            4
                        ]
                    },
                    "fields": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fields",
                        "description": "Specify the document fields to look for suggestions within. Defaults to all text fields.",
                        "examples": [
                            [
                                "title",
                                "content"
                            ]
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "QuerySuggestionRequest"
            },
            "QuerySuggestionResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/QuerySuggestionResponseValue"
                        },
                        "type": "array",
                        "title": "Results"
                    }
                },
                "type": "object",
                "required": [
                    "results"
                ],
                "title": "QuerySuggestionResponse",
                "examples": [
                    {
                        "results": [
                            {
                                "raw": "carl's"
                            },
                            {
                                "raw": "carl's caverns"
                            },
                            {
                                "raw": "carolina"
                            }
                        ]
                    }
                ]
            },
            "QuerySuggestionResponseValue": {
                "properties": {
                    "raw": {
                        "type": "string",
                        "title": "Raw"
                    }
                },
                "type": "object",
                "required": [
                    "raw"
                ],
                "title": "QuerySuggestionResponseValue"
            },
            "Range": {
                "properties": {
                    "from": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From"
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To"
                    }
                },
                "type": "object",
                "title": "Range"
            },
            "RequestFacetRange": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "value",
                            "range"
                        ],
                        "title": "Type"
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "ranges": {
                        "items": {
                            "$ref": "#/components/schemas/RequestFacetRangeObject"
                        },
                        "type": "array",
                        "title": "Ranges"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "ranges"
                ],
                "title": "RequestFacetRange"
            },
            "RequestFacetRangeObject": {
                "properties": {
                    "from": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From"
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To"
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    }
                },
                "type": "object",
                "title": "RequestFacetRangeObject"
            },
            "RequestFacetValue": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "value",
                            "range"
                        ],
                        "title": "Type"
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "size": {
                        "type": "integer",
                        "maximum": 100.0,
                        "minimum": 1.0,
                        "title": "Size",
                        "default": 10
                    },
                    "sort": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/RequestFacetValueSort"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ],
                "title": "RequestFacetValue"
            },
            "RequestFacetValueSort": {
                "additionalProperties": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "type": "object",
                "title": "RequestFacetValueSort"
            },
            "ResponseFacetRange": {
                "properties": {
                    "from": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "From"
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "To"
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    }
                },
                "type": "object",
                "required": [
                    "count"
                ],
                "title": "ResponseFacetRange"
            },
            "ResponseFacetValue": {
                "properties": {
                    "value": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            }
                        ],
                        "title": "Value"
                    },
                    "count": {
                        "type": "integer",
                        "title": "Count"
                    }
                },
                "type": "object",
                "required": [
                    "value",
                    "count"
                ],
                "title": "ResponseFacetValue"
            },
            "ResponseSuccess": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "Success",
                        "examples": [
                            true
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "success"
                ],
                "title": "ResponseSuccess"
            },
            "Schema": {
                "additionalProperties": {
                    "type": "string"
                },
                "type": "object",
                "title": "Schema"
            },
            "SchemaPostResponse": {
                "properties": {
                    "acknowledged": {
                        "type": "boolean",
                        "title": "Acknowledged",
                        "examples": [
                            true
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "acknowledged"
                ],
                "title": "SchemaPostResponse"
            },
            "SearchRequest": {
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "examples": [
                            "lorem"
                        ]
                    },
                    "sort": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Sort"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "page": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PaginationNoTotals"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "search_fields": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchRequestSearchFields"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "result_fields": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchRequestResultFields"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "facets": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/FacetsRequest"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "filters": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Filters"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "analytics": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Tags"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "SearchRequest"
            },
            "SearchRequestResultField": {
                "properties": {
                    "raw": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchRequestResultFieldRaw"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "snippet": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchRequestResultFieldSnippet"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "description": "If given for a field type other than text, it will be silently ignored."
                    }
                },
                "type": "object",
                "title": "SearchRequestResultField"
            },
            "SearchRequestResultFieldRaw": {
                "properties": {
                    "size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Size",
                        "description": "Length of the return value (to the nearest word). Can only be used on text fields. If given for \n        a field type other than text, it will be silently ignored. Defaults to the entire text field."
                    }
                },
                "type": "object",
                "title": "SearchRequestResultFieldRaw"
            },
            "SearchRequestResultFieldSnippet": {
                "properties": {
                    "size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Size",
                        "description": "Character length of the snippet returned (to the nearest word). Must be at least 20; defaults to \n        100.",
                        "default": 100
                    },
                    "fallback": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Fallback",
                        "description": "If true, return the raw text field as the snippet (if no snippet is found). Defaults to true.",
                        "default": true
                    }
                },
                "type": "object",
                "title": "SearchRequestResultFieldSnippet"
            },
            "SearchRequestResultFields": {
                "additionalProperties": {
                    "$ref": "#/components/schemas/SearchRequestResultField"
                },
                "type": "object",
                "title": "SearchRequestResultFields",
                "examples": [
                    {
                        "description": {
                            "raw": {
                                "size": 200
                            },
                            "snippet": {
                                "size": 100
                            }
                        },
                        "states": {
                            "raw": {},
                            "snippet": {
                                "fallback": false,
                                "size": 20
                            }
                        },
                        "title": {
                            "snippet": {
                                "fallback": true,
                                "size": 20
                            }
                        }
                    }
                ]
            },
            "SearchRequestSearchFields": {
                "anyOf": [
                    {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/SearchRequestSearchFieldsWeight"
                        },
                        "type": "object"
                    },
                    {
                        "type": "null"
                    }
                ],
                "title": "SearchRequestSearchFields",
                "examples": [
                    {
                        "description": {
                            "weight": 5
                        },
                        "states": {
                            "weight": 3
                        },
                        "title": {
                            "weight": 10
                        }
                    }
                ]
            },
            "SearchRequestSearchFieldsWeight": {
                "properties": {
                    "weight": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Weight"
                    }
                },
                "type": "object",
                "title": "SearchRequestSearchFieldsWeight"
            },
            "SearchResponse": {
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/SearchResponseMeta"
                    },
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/DocumentResponse"
                        },
                        "type": "array",
                        "title": "Results"
                    },
                    "facets": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "items": {
                                        "$ref": "#/components/schemas/FacetResponse"
                                    },
                                    "type": "array"
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Facets"
                    }
                },
                "type": "object",
                "required": [
                    "meta",
                    "results"
                ],
                "title": "SearchResponse"
            },
            "SearchResponseEngine": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "type": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Type"
                    }
                },
                "type": "object",
                "title": "SearchResponseEngine"
            },
            "SearchResponseMeta": {
                "properties": {
                    "warnings": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Warnings",
                        "default": []
                    },
                    "precision": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Precision"
                    },
                    "engine": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SearchResponseEngine"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "request_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Request Id"
                    },
                    "page": {
                        "$ref": "#/components/schemas/PaginationWithTotals"
                    }
                },
                "type": "object",
                "required": [
                    "page"
                ],
                "title": "SearchResponseMeta"
            },
            "Sort": {
                "anyOf": [
                    {
                        "items": {
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "enum": [
                                            "asc",
                                            "desc"
                                        ]
                                    },
                                    {
                                        "$ref": "#/components/schemas/Geolocation"
                                    }
                                ]
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    {
                        "type": "null"
                    }
                ],
                "title": "Sort",
                "examples": [
                    [
                        {
                            "_score": "desc"
                        },
                        {
                            "title": "desc"
                        },
                        {
                            "location": {
                                "center": {
                                    "latitude": -77.08,
                                    "longitude": 38.89
                                },
                                "order": "asc"
                            }
                        }
                    ]
                ]
            },
            "SpellingSuggestionRequest": {
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "A query for which to receive spelling suggestions.",
                        "examples": [
                            "caros"
                        ]
                    },
                    "size": {
                        "type": "integer",
                        "maximum": 10.0,
                        "minimum": 1.0,
                        "title": "Size",
                        "description": "Maximum number of spelling suggestions to return. Must be between 1 and 10. Defaults to 1.",
                        "default": 1,
                        "examples": [
                            4
                        ]
                    },
                    "fields": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ValidatedFields"
                            }
                        ],
                        "description": "Specify the document fields to look for suggestions within. At least 1 field is required.",
                        "examples": [
                            [
                                "title",
                                "content"
                            ]
                        ]
                    },
                    "formatted": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Formatted",
                        "description": "Whether you would like a 'snippet' field to be returned with each of your results.",
                        "default": false,
                        "examples": [
                            true
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "query",
                    "fields"
                ],
                "title": "SpellingSuggestionRequest"
            },
            "SpellingSuggestionResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/DocumentField"
                        },
                        "type": "array",
                        "title": "Results"
                    }
                },
                "type": "object",
                "required": [
                    "results"
                ],
                "title": "SpellingSuggestionResponse",
                "examples": [
                    {
                        "results": [
                            {
                                "raw": "carl's",
                                "snippet": "<em>carl's</em>"
                            },
                            {
                                "raw": "carolina",
                                "snippet": "<em>carolina</em>"
                            }
                        ]
                    }
                ]
            },
            "SynonymRule": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "synonyms": {
                        "type": "string",
                        "title": "Synonyms"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "synonyms"
                ],
                "title": "SynonymRule"
            },
            "SynonymRuleRequest": {
                "properties": {
                    "synonyms": {
                        "type": "string",
                        "title": "Synonyms"
                    }
                },
                "type": "object",
                "required": [
                    "synonyms"
                ],
                "title": "SynonymRuleRequest"
            },
            "Tags": {
                "properties": {
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Tags",
                        "description": "The Search endpoint can be used to attach tags to your documents. One or more tags can be applied \n        to filter results via the API or within your analytics dashboard.",
                        "examples": [
                            [
                                "desktop",
                                "mobile"
                            ]
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "tags"
                ],
                "title": "Tags"
            },
            "Unit": {
                "type": "string",
                "enum": [
                    "mm",
                    "cm",
                    "m",
                    "km",
                    "in",
                    "ft",
                    "yd",
                    "mi"
                ],
                "title": "Unit"
            },
            "ValidatedFields": {
                "items": {
                    "type": "string"
                },
                "type": "array",
                "title": "ValidatedFields"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "ValueFilter": {
                "additionalProperties": {
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/Range"
                        },
                        {
                            "$ref": "#/components/schemas/Geo"
                        },
                        {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "type": "array"
                        }
                    ]
                },
                "type": "object",
                "title": "ValueFilter"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}
